Como usar o fxPwm 1.0.0:

O roteiro básico de uso dessa biblioteca é bem simples e pode ser resumido pela seguinte receita de bolo:
1. Inicialize a biblioteca: ........................... fxPwm_Initialize
2. Configure suas portas: ............................. fxPwm_ConfigurePort
3. Ligue a biblioteca: ................................ fxPwm_Start
4. Estabeleça as condições iniciais de cada porta: .... fxPwm_SetFrequencyAndDuty e afins
5. Habilite suas portas: .............................. fxPwm_Enable
6. Manipule suas portas: .............................. fxPwm_SetFrequencyAndDuty e afins
7. Desligue suas portas: .............................. fxPwm_Disable
8. Desligue a biblioteca: ............................. fxPwm_Stop
9. Libere a biblioteca: ............................... fxPwm_Free

fxPwm_Initialize(numPorts, microsFunction);
Inicializa a biblioteca com certa quantidade de portas e uma função micros.
numPorts: quantidade de portas que serão usadas.
microsFunction: ponteiro para uma função que retorna a quantidade de microssegundos desde o começo do programa.
microsFunction pode ser NULL.

fxPwm_ConfigurePort(portIndex, pinNumber);
Associa uma porta thPwm com um pino de saída.
portIndex: índice da porta. (0 até numPorts-1)
pinNumber: número do pino do Arduino

fxPwm_Start();
Inicia o funcionamento da biblioteca. Necessário para tudo funcionar.

fxPwm_Stop();
Para o funcionamento da biblioteca, e para todas portas PWM.

fxPwm_SetFrequencyAndDuty(portIndex, frequency, duty);
Atribui a frequência e o ciclo de trabalho de uma porta.
portIndex: índice da porta. (0 até numPorts-1)
frequency: frequência, em hertz.
duty: ciclo de trabalho.

fxPwm_SetFrequency(portIndex, frequency);
fxPwm_SetDuty(portIndex, duty);
Derivadas de fxPwm_SetFrequencyAndDuty.

fxPwm_SetPeriodAndDuty(portIndex, period, duty);
Atribui o período de cada ciclo PWM e o ciclo de trabalho.
portIndex: índice da porta. (0 até numPorts-1)
period: período, em microssegundos.
duty: ciclo de trabalho.

fxPwm_SetPeriod(portIndex, period);
Derivada de fxPwm_SetPeriodAndDuty.

fxPwm_Enable(portIndex);
Ativa uma porta, permitindo que ela module na saída.

fxPwm_EnableAll();
Ativa todas portas.

fxPwm_Disable(portIndex);
Desativa uma porta, impedindo que ela module na saída.

fxPwm_DisableAll();
Desativa todas portas.

fxPwm_Free();
Faz uma pequena limpeza e libera todos recursos usados pela biblioteca.

--------> Leia os códigos fonte se precisar de mais informação. Recomendo o arquivo fxPwm.h.

Obs.: observe que, quanto mais portas forem usadas, e quanto maior a frequência, pior será o resultado da modulação.
Com 6 portas entre 500 e 1000 Hz, tudo funciona bem.
Com 6 portas entre 2000 e 3000 Hz, começa a haver bastante jitter. Considere isso. Os recursos são finitos.

Resumo das funções:

fxPwm_Initialize(numPorts, microsFunction);
fxPwm_ConfigurePort(portIndex, pinNumber);

fxPwm_Start();
fxPwm_Stop();
fxPwm_Free();

fxPwm_SetFrequencyAndDuty(portIndex, frequency, duty)
fxPwm_SetFrequency(portIndex, frequency);
fxPwm_SetDuty(portIndex, duty);

fxPwm_SetPeriodAndDuty(portIndex, period, duty);
fxPwm_SetPeriod(portIndex, period);

fxPwm_Enable(portIndex);
fxPwm_EnableAll();
fxPwm_Disable(portIndex);
fxPwm_DisableAll();

